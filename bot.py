
import logging
import openai
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import OPENAI_API_KEY, YOUR_TELEGRAM_BOT_TOKEN
from faiss_db.search import search_problem
from chatgpt_handler import generate_final_response

# –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–ª—é—á API
openai.api_key = OPENAI_API_KEY
USER_CONTEXT = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_FOR_QUESTION = False
WAITING_FOR_CONFIRMATION = False

def format_for_markdown_v2(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2."""
    formatted_text = (
        text.replace("**", "__")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ** –≤ __ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            .replace("\\n", "\n")
            .replace("\n\n", "\n")
    )
    return formatted_text


def escape_markdown_v2(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2."""
    escape_chars = r"_[]()~`>#+-=|{}.!"
    return "".join(f"\\{char}" if char in escape_chars else char for char in text)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start."""
    global WAITING_FOR_QUESTION, WAITING_FOR_CONFIRMATION
    WAITING_FOR_QUESTION = False
    WAITING_FOR_CONFIRMATION = False

    keyboard = [[InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
        reply_markup=reply_markup
    )


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    global WAITING_FOR_QUESTION, WAITING_FOR_CONFIRMATION, USER_CONTEXT
    query = update.callback_query
    await query.answer()

    if query.data == "ask_question":
        WAITING_FOR_QUESTION = True
        WAITING_FOR_CONFIRMATION = False
        await query.message.reply_text("üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

    elif query.data == "answer_received":
        WAITING_FOR_QUESTION = False
        WAITING_FOR_CONFIRMATION = False
        USER_CONTEXT.pop(update.effective_user.id, None)  # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        keyboard = [[InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ù–∞–∂–º–∏—Ç–µ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π.", reply_markup=reply_markup)

    elif query.data == "clarify_question":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å, –±–æ—Ç —Å–Ω–æ–≤–∞ –æ–∂–∏–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç
        WAITING_FOR_QUESTION = True
        WAITING_FOR_CONFIRMATION = False
        await query.message.reply_text("‚úç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å:")


def split_message(text, max_length=4096):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π."""
    parts = []
    while len(text) > max_length:
        split_index = text.rfind('\n', 0, max_length)
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index])
        text = text[split_index:]
    parts.append(text)
    return parts


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã."""
    global WAITING_FOR_QUESTION, WAITING_FOR_CONFIRMATION, USER_CONTEXT

    user_query = update.message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    user_id = update.effective_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_query}")

    if not WAITING_FOR_QUESTION and user_id not in USER_CONTEXT:
        await update.message.reply_text("‚ùó –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'.")
        return

    if WAITING_FOR_CONFIRMATION:
        await update.message.reply_text("‚ùó –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å.")
        return

    WAITING_FOR_QUESTION = False
    message = await update.message.reply_text("‚åõ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

    try:
        if user_id in USER_CONTEXT:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—à–ª—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            previous_query = USER_CONTEXT[user_id]["original_query"]
            previous_response = USER_CONTEXT[user_id]["previous_response"]
            previous_metadata = USER_CONTEXT[user_id]["previous_metadata"]

            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ
            logging.info(f"üîé –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ —É—Ç–æ—á–Ω—è—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É: {user_query}") #

            new_metadata_json = search_problem(user_query)
            new_metadata_list = json.loads(new_metadata_json).get("–ø—Ä–æ–±–ª–µ–º—ã", [])

            logging.info(f"üõ† –ù–∞–π–¥–µ–Ω–æ {len(new_metadata_list)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π") #


            if not new_metadata_list:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ –≤–∞—à–µ–º—É —É—Ç–æ—á–Ω–µ–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
                await message.delete()
                return

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            logging.info(f"üîÑ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(previous_metadata)} –∑–∞–ø–∏—Å–µ–π")#
            logging.info(f"üîÑ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(new_metadata_list)} –∑–∞–ø–∏—Å–µ–π")#

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            combined_metadata = previous_metadata + new_metadata_list

            logging.info(f"üßê –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(combined_metadata)}")#


            unique_metadata = {json.dumps(record, ensure_ascii=False): record for record in combined_metadata}.values()
            combined_metadata_list = list(unique_metadata)  # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

            logging.info(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(combined_metadata_list)}") #


            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç—ã
            combined_query = user_query

            logging.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT: {len(combined_metadata_list)} –∑–∞–ø–∏—Å–µ–π")
            logging.info(f"üìú –ò—Ç–æ–≥–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è GPT: {combined_query}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            final_response, token_count = generate_final_response(combined_metadata_list, combined_query)
            formatted_response = escape_markdown_v2(final_response)

            logging.info(f"üì© –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT:\n{final_response}")


            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            USER_CONTEXT[user_id] = {
                "original_query": previous_query,
                "previous_response": final_response,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
                "previous_metadata": combined_metadata_list  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π JSON
            }

        else:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            metadata_json = search_problem(user_query)
            metadata_list = json.loads(metadata_json).get("–ø—Ä–æ–±–ª–µ–º—ã", [])

            if not metadata_list:
                await update.message.reply_text("‚ö†Ô∏è –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
                await message.delete()
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            final_response, token_count = generate_final_response(metadata_list, user_query)
            formatted_response = escape_markdown_v2(final_response)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            USER_CONTEXT[user_id] = {
                "original_query": user_query,
                "previous_response": final_response,
                "previous_metadata": metadata_list
            }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        keyboard = [
            [InlineKeyboardButton("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", callback_data="answer_received")],
            [InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="clarify_question")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(formatted_response.replace("**", "__"), reply_markup=reply_markup, parse_mode="MarkdownV2")
        logging.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {token_count}")

        WAITING_FOR_CONFIRMATION = True
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await message.delete()



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help."""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤–∞–º –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞."""
    application = ApplicationBuilder().token(YOUR_TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()