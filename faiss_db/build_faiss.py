import pandas as pd
import numpy as np
import faiss
import os
import time
import asyncio
import sqlite3
from langchain.embeddings import OpenAIEmbeddings
from tqdm.asyncio import tqdm as async_tqdm
from config import OPENAI_API_KEY

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATA_FILE = "bd.xlsx"
FAISS_INDEX_PATH = "./faiss_index"
SQLITE_DB_PATH = "metadata.db"
OPENAI_API_KEY =  OPENAI_API_KEY
BATCH_SIZE = 1000
DIMENSION = 1536
MAX_CONCURRENT_TASKS = 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
embeddings = OpenAIEmbeddings(model="text-embedding-ada-002", openai_api_key=OPENAI_API_KEY)


async def embed_texts(texts):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤."""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, embeddings.embed_documents, texts)


def initialize_metadata_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn = sqlite3.connect(SQLITE_DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS metadata (
            id INTEGER PRIMARY KEY,
            idea_number TEXT,
            status TEXT,
            title TEXT,
            cause TEXT,
            solution TEXT
        )
    """)
    conn.commit()
    conn.close()


def save_metadata(batch, start_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤."""
    conn = sqlite3.connect(SQLITE_DB_PATH)
    cursor = conn.cursor()

    for i in range(len(batch)):
        current_id = start_id + i
        cursor.execute("SELECT id FROM metadata WHERE id = ?", (current_id,))
        result = cursor.fetchone()

        if result:
            print(f"‚ö†Ô∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä {current_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫...")
            continue

        cursor.execute("""
            INSERT INTO metadata (id, idea_number, status, title, cause, solution)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (
            current_id,
            str(batch.iloc[i]["–ù–æ–º–µ—Ä –ò–¥–µ–∏"]),
            str(batch.iloc[i]["–°—Ç–∞—Ç—É—Å –ò–¥–µ–∏"]),
            str(batch.iloc[i]["–ù–∞–∑–≤–∞–Ω–∏–µ"]),
            str(batch.iloc[i]["–ü—Ä–∏—á–∏–Ω–∞"]),
            str(batch.iloc[i]["–†–µ—à–µ–Ω–∏–µ"])
        ))

    conn.commit()
    conn.close()



async def process_batch(batch, title_index, cause_index, solution_index, progress_bar, start_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö."""
    start_time = time.time()

    # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç—Ä–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    texts_to_vectorize = batch["–ù–∞–∑–≤–∞–Ω–∏–µ"].tolist() + batch["–ü—Ä–∏—á–∏–Ω–∞"].tolist() + batch["–†–µ—à–µ–Ω–∏–µ"].tolist()
    vectors = await embed_texts(texts_to_vectorize)

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏
    title_vectors = np.array(vectors[:len(batch)]).astype(np.float32)
    cause_vectors = np.array(vectors[len(batch):2*len(batch)]).astype(np.float32)
    solution_vectors = np.array(vectors[2*len(batch):]).astype(np.float32)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å—ã
    title_index.add(title_vectors)
    cause_index.add(cause_vectors)
    solution_index.add(solution_vectors)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    save_metadata(batch, start_id)

    elapsed_time = time.time() - start_time
    progress_bar.update(len(batch))  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    print(f"‚úÖ –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")


def get_max_id():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã metadata –∏–ª–∏ 0, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞."""
    conn = sqlite3.connect(SQLITE_DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT MAX(id) FROM metadata")
    max_id = cursor.fetchone()[0]
    conn.close()
    return max_id if max_id is not None else 0


async def load_data():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö FAISS –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ SQLite."""
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel...")
    df = pd.read_excel(DATA_FILE, header=1, engine='openpyxl')
    df = df[['–ù–æ–º–µ—Ä –ò–¥–µ–∏', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ü—Ä–∏—á–∏–Ω–∞', '–†–µ—à–µ–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å –ò–¥–µ–∏']].dropna().reset_index(drop=True)
    df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    title_index = faiss.IndexFlatL2(DIMENSION)
    cause_index = faiss.IndexFlatL2(DIMENSION)
    solution_index = faiss.IndexFlatL2(DIMENSION)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
    initialize_metadata_db()

    print("üöÄ –ù–∞—á–∞–ª–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    tasks = []

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    total_records = len(df)
    start_id = get_max_id() + 1
    with async_tqdm(total=total_records, desc="üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏", unit="–∑–∞–ø–∏—Å—å") as progress_bar:
        for i in range(0, total_records, BATCH_SIZE):
            batch = df.iloc[i:i+BATCH_SIZE]
            tasks.append(process_batch(batch, title_index, cause_index, solution_index, progress_bar, start_id=start_id))
            start_id += len(batch)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –∑–∞–¥–∞—á
            if len(tasks) >= MAX_CONCURRENT_TASKS:
                await asyncio.gather(*tasks)
                tasks = []

        if tasks:
            await asyncio.gather(*tasks)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞ –¥–∏—Å–∫
    if not os.path.exists(FAISS_INDEX_PATH):
        os.makedirs(FAISS_INDEX_PATH)

    faiss.write_index(title_index, os.path.join(FAISS_INDEX_PATH, "title_index.faiss"))
    faiss.write_index(cause_index, os.path.join(FAISS_INDEX_PATH, "cause_index.faiss"))
    faiss.write_index(solution_index, os.path.join(FAISS_INDEX_PATH, "solution_index.faiss"))

    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")



if __name__ == "__main__":
    print("üìä –°—Ç–∞—Ä—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É FAISS...")
    asyncio.run(load_data())
